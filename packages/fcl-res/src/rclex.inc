
(* lexical analyzer template (TP Lex V3.0), V1.0 3-2-91 AG *)

(* global definitions: *)
var
  kwtmp: integer;

const
  KeywordDefs: array [0..33] of TIdentMapEntry = (
    // attribs
    (Value: _LANGUAGE;             Name: 'LANGUAGE'),
    (Value: _CHARACTERISTICS;      Name: 'CHARACTERISTICS'),
    (Value: _VERSION;              Name: 'VERSION'),
    (Value: _MOVEABLE;             Name: 'MOVEABLE'),
    (Value: _FIXED;                Name: 'FIXED'),
    (Value: _PURE;                 Name: 'PURE'),
    (Value: _IMPURE;               Name: 'IMPURE'),
    (Value: _PRELOAD;              Name: 'PRELOAD'),
    (Value: _LOADONCALL;           Name: 'LOADONCALL'),
    (Value: _DISCARDABLE;          Name: 'DISCARDABLE'),
    // resource names
    (Value: _ANICURSOR;            Name: 'ANICURSOR'),
    (Value: _ANIICON;              Name: 'ANIICON'),
    (Value: _BITMAP;               Name: 'BITMAP'),
    (Value: _CURSOR;               Name: 'CURSOR'),
    (Value: _DLGINCLUDE;           Name: 'DLGINCLUDE'),
    (Value: _DLGINIT;              Name: 'DLGINIT'),
    (Value: _HTML;                 Name: 'HTML'),
    (Value: _ICON;                 Name: 'ICON'),
    (Value: _MANIFEST;             Name: 'MANIFEST'),
    (Value: _MESSAGETABLE;         Name: 'MESSAGETABLE'),
    (Value: _PLUGPLAY;             Name: 'PLUGPLAY'),
    (Value: _STRINGTABLE;          Name: 'STRINGTABLE'),
    (Value: _RCDATA;               Name: 'RCDATA'),
    (Value: _VERSIONINFO;          Name: 'VERSIONINFO'),
    (Value: _VXD;                  Name: 'VXD'),
    // file version fields names
    (Value: _FILEVERSION;          Name: 'FILEVERSION'),
    (Value: _PRODUCTVERSION;       Name: 'PRODUCTVERSION'),
    (Value: _FILEFLAGSMASK;        Name: 'FILEFLAGSMASK'),
    (Value: _FILEFLAGS;            Name: 'FILEFLAGS'),
    (Value: _FILEOS;               Name: 'FILEOS'),
    (Value: _FILETYPE;             Name: 'FILETYPE'),
    (Value: _FILESUBTYPE;          Name: 'FILESUBTYPE'),
    (Value: _BLOCK;                Name: 'BLOCK'),
    (Value: _VALUE;                Name: 'VALUE')
  );

function KeywordToInt(k: string; out kw: integer): boolean;
var
  i: integer;
begin
  Result:= False;
  for i:= low(KeywordDefs) to high(KeywordDefs) do begin
    if k = KeywordDefs[i].Name then begin
      kw:= KeywordDefs[i].Value;
      Exit(True);
    end;
  end;
end;

const INCOMLINE = 2;
const INCOMMENT = 4;
const INSTRING = 6;
const INSTRINGL = 8;



function yylex : Integer;

procedure yyaction ( yyruleno : Integer );
  (* local definitions: *)

begin
  (* actions: *)
  case yyruleno of
  1:
                        start(INCOMLINE);
  2:
                        begin start(0); unget_char(nl); end;
  3:
                        yymore;

  4:
                        start(INCOMMENT);
  5:
                        ;
  6:
                        start(0);
  7:
                        return(_ILLEGAL);

  8:
                        return(_NUMBER);
  9:
                        return(_NUMBER);
  10:
                                  begin start(INSTRINGL); strbuf_begin(); end;
  11:
                                  begin start(INSTRING); strbuf_begin(); end;
  12:
                                  strbuf_append('"');
  13:
                                  begin
                                    start(0);
                                    return(_QUOTEDSTR);
                                  end;
  14:
                                  begin
                                    start(0);
                                    return(_QUOTEDSTRL);
                                  end;
  15:
                                  ;
  16:
                                  return(_ILLEGAL);
  17:
                                  strbuf_append(yytext);
  18:
                        begin yytext:= 'StringFileInfo'; return(_STR_StringFileInfo); end;
  19:
                        begin yytext:= 'VarFileInfo'; return(_STR_VarFileInfo); end;
  20:
                        begin yytext:= 'Translation'; return(_STR_Translation); end;

  21:
                        return(_BEGIN);
  22:
                        return(_END);
  23:
                        begin
                          if ypreproc.isdefine(yytext) then begin
                            unget_char(' ');
                            unget_string(ypreproc.getdefine(yytext));
                          end else
                            if KeywordToInt(yytext, kwtmp) then
                              return(kwtmp)
                            else
                              return(_ID);
                         end;
  24:
                        ;
  25:
                        returnc(yytext[1]);
  26:
                        return(_ILLEGAL);
  end;
end(*yyaction*);

(* DFA table: *)

type YYTRec = record
                cc : set of Char;
                s  : Integer;
              end;

const

yynmarks   = 60;
yynmatches = 60;
yyntrans   = 127;
yynstates  = 91;

yyk : array [1..yynmarks] of Integer = (
  { 0: }
  { 1: }
  { 2: }
  { 3: }
  { 4: }
  { 5: }
  { 6: }
  { 7: }
  { 8: }
  { 9: }
  { 10: }
  25,
  26,
  { 11: }
  8,
  26,
  { 12: }
  8,
  26,
  { 13: }
  23,
  26,
  { 14: }
  11,
  26,
  { 15: }
  23,
  26,
  { 16: }
  21,
  26,
  { 17: }
  23,
  26,
  { 18: }
  22,
  26,
  { 19: }
  23,
  26,
  { 20: }
  24,
  { 21: }
  25,
  26,
  { 22: }
  24,
  26,
  { 23: }
  26,
  { 24: }
  2,
  { 25: }
  3,
  { 26: }
  5,
  { 27: }
  5,
  { 28: }
  7,
  { 29: }
  13,
  17,
  { 30: }
  17,
  { 31: }
  16,
  { 32: }
  17,
  { 33: }
  14,
  17,
  { 34: }
  1,
  { 35: }
  4,
  { 36: }
  8,
  { 37: }
  8,
  { 38: }
  { 39: }
  10,
  { 40: }
  23,
  { 41: }
  { 42: }
  { 43: }
  { 44: }
  23,
  { 45: }
  23,
  { 46: }
  6,
  { 47: }
  12,
  { 48: }
  15,
  { 49: }
  9,
  { 50: }
  { 51: }
  23,
  { 52: }
  22,
  23,
  { 53: }
  9,
  { 54: }
  { 55: }
  { 56: }
  { 57: }
  23,
  { 58: }
  { 59: }
  21,
  23,
  { 60: }
  { 61: }
  { 62: }
  { 63: }
  { 64: }
  { 65: }
  { 66: }
  { 67: }
  { 68: }
  { 69: }
  19,
  { 70: }
  20,
  { 71: }
  18
  { 72: }
  { 73: }
  { 74: }
  { 75: }
  { 76: }
  { 77: }
  { 78: }
  { 79: }
  { 80: }
  { 81: }
  { 82: }
  { 83: }
  { 84: }
  { 85: }
  { 86: }
  { 87: }
  { 88: }
  { 89: }
  { 90: }
);

yym : array [1..yynmatches] of Integer = (
{ 0: }
{ 1: }
{ 2: }
{ 3: }
{ 4: }
{ 5: }
{ 6: }
{ 7: }
{ 8: }
{ 9: }
{ 10: }
  25,
  26,
{ 11: }
  8,
  26,
{ 12: }
  8,
  26,
{ 13: }
  23,
  26,
{ 14: }
  11,
  26,
{ 15: }
  23,
  26,
{ 16: }
  21,
  26,
{ 17: }
  23,
  26,
{ 18: }
  22,
  26,
{ 19: }
  23,
  26,
{ 20: }
  24,
{ 21: }
  25,
  26,
{ 22: }
  24,
  26,
{ 23: }
  26,
{ 24: }
  2,
{ 25: }
  3,
{ 26: }
  5,
{ 27: }
  5,
{ 28: }
  7,
{ 29: }
  13,
  17,
{ 30: }
  17,
{ 31: }
  16,
{ 32: }
  17,
{ 33: }
  14,
  17,
{ 34: }
  1,
{ 35: }
  4,
{ 36: }
  8,
{ 37: }
  8,
{ 38: }
{ 39: }
  10,
{ 40: }
  23,
{ 41: }
{ 42: }
{ 43: }
{ 44: }
  23,
{ 45: }
  23,
{ 46: }
  6,
{ 47: }
  12,
{ 48: }
  15,
{ 49: }
  9,
{ 50: }
{ 51: }
  23,
{ 52: }
  22,
  23,
{ 53: }
  9,
{ 54: }
{ 55: }
{ 56: }
{ 57: }
  23,
{ 58: }
{ 59: }
  21,
  23,
{ 60: }
{ 61: }
{ 62: }
{ 63: }
{ 64: }
{ 65: }
{ 66: }
{ 67: }
{ 68: }
{ 69: }
  19,
{ 70: }
  20,
{ 71: }
  18
{ 72: }
{ 73: }
{ 74: }
{ 75: }
{ 76: }
{ 77: }
{ 78: }
{ 79: }
{ 80: }
{ 81: }
{ 82: }
{ 83: }
{ 84: }
{ 85: }
{ 86: }
{ 87: }
{ 88: }
{ 89: }
{ 90: }
);

yyt : array [1..yyntrans] of YYTrec = (
{ 0: }
  ( cc: [ #1..#8,#11,#13..#31,'!','#','$','''','*','+',
            '-','.',':'..'@','['..']','`',#127..#255 ]; s: 23),
  ( cc: [ #9,#12,' ' ]; s: 22),
  ( cc: [ #10 ]; s: 20),
  ( cc: [ '"' ]; s: 14),
  ( cc: [ '%','&','(',')',',','^','|','~' ]; s: 21),
  ( cc: [ '/' ]; s: 10),
  ( cc: [ '0' ]; s: 12),
  ( cc: [ '1'..'9' ]; s: 11),
  ( cc: [ 'A','C','D','F'..'K','M'..'Z','_','a'..'z' ]; s: 19),
  ( cc: [ 'B' ]; s: 15),
  ( cc: [ 'E' ]; s: 17),
  ( cc: [ 'L' ]; s: 13),
  ( cc: [ '{' ]; s: 16),
  ( cc: [ '}' ]; s: 18),
{ 1: }
  ( cc: [ #1..#8,#11,#13..#31,'!','#','$','''','*','+',
            '-','.',':'..'@','['..']','`',#127..#255 ]; s: 23),
  ( cc: [ #9,#12,' ' ]; s: 22),
  ( cc: [ #10 ]; s: 20),
  ( cc: [ '"' ]; s: 14),
  ( cc: [ '%','&','(',')',',','^','|','~' ]; s: 21),
  ( cc: [ '/' ]; s: 10),
  ( cc: [ '0' ]; s: 12),
  ( cc: [ '1'..'9' ]; s: 11),
  ( cc: [ 'A','C','D','F'..'K','M'..'Z','_','a'..'z' ]; s: 19),
  ( cc: [ 'B' ]; s: 15),
  ( cc: [ 'E' ]; s: 17),
  ( cc: [ 'L' ]; s: 13),
  ( cc: [ '{' ]; s: 16),
  ( cc: [ '}' ]; s: 18),
{ 2: }
  ( cc: [ #1..#9,#11..#255 ]; s: 25),
  ( cc: [ #10 ]; s: 24),
{ 3: }
  ( cc: [ #1..#9,#11..#255 ]; s: 25),
  ( cc: [ #10 ]; s: 24),
{ 4: }
  ( cc: [ #0 ]; s: 28),
  ( cc: [ #1..#9,#11..')','+'..#255 ]; s: 26),
  ( cc: [ '*' ]; s: 27),
{ 5: }
  ( cc: [ #0 ]; s: 28),
  ( cc: [ #1..#9,#11..')','+'..#255 ]; s: 26),
  ( cc: [ '*' ]; s: 27),
{ 6: }
  ( cc: [ #1..#9,#11..'!','#'..'[',']'..#255 ]; s: 32),
  ( cc: [ #10 ]; s: 31),
  ( cc: [ '"' ]; s: 29),
  ( cc: [ '\' ]; s: 30),
{ 7: }
  ( cc: [ #1..#9,#11..'!','#'..'[',']'..#255 ]; s: 32),
  ( cc: [ #10 ]; s: 31),
  ( cc: [ '"' ]; s: 29),
  ( cc: [ '\' ]; s: 30),
{ 8: }
  ( cc: [ #1..#9,#11..'!','#'..'[',']'..#255 ]; s: 32),
  ( cc: [ #10 ]; s: 31),
  ( cc: [ '"' ]; s: 33),
  ( cc: [ '\' ]; s: 30),
{ 9: }
  ( cc: [ #1..#9,#11..'!','#'..'[',']'..#255 ]; s: 32),
  ( cc: [ #10 ]; s: 31),
  ( cc: [ '"' ]; s: 33),
  ( cc: [ '\' ]; s: 30),
{ 10: }
  ( cc: [ '*' ]; s: 35),
  ( cc: [ '/' ]; s: 34),
{ 11: }
  ( cc: [ '0'..'9' ]; s: 36),
  ( cc: [ 'L' ]; s: 37),
{ 12: }
  ( cc: [ '0'..'9' ]; s: 36),
  ( cc: [ 'L' ]; s: 37),
  ( cc: [ 'x' ]; s: 38),
{ 13: }
  ( cc: [ '"' ]; s: 39),
  ( cc: [ '0'..'9','A'..'Z','_','a'..'z' ]; s: 40),
{ 14: }
  ( cc: [ 'S' ]; s: 41),
  ( cc: [ 'T' ]; s: 43),
  ( cc: [ 'V' ]; s: 42),
{ 15: }
  ( cc: [ '0'..'9','A'..'D','F'..'Z','_','a'..'z' ]; s: 40),
  ( cc: [ 'E' ]; s: 44),
{ 16: }
{ 17: }
  ( cc: [ '0'..'9','A'..'M','O'..'Z','_','a'..'z' ]; s: 40),
  ( cc: [ 'N' ]; s: 45),
{ 18: }
{ 19: }
  ( cc: [ '0'..'9','A'..'Z','_','a'..'z' ]; s: 40),
{ 20: }
{ 21: }
{ 22: }
{ 23: }
{ 24: }
{ 25: }
{ 26: }
{ 27: }
  ( cc: [ '/' ]; s: 46),
{ 28: }
{ 29: }
  ( cc: [ '"' ]; s: 47),
{ 30: }
  ( cc: [ #10 ]; s: 48),
{ 31: }
{ 32: }
{ 33: }
  ( cc: [ '"' ]; s: 47),
{ 34: }
{ 35: }
{ 36: }
  ( cc: [ '0'..'9' ]; s: 36),
  ( cc: [ 'L' ]; s: 37),
{ 37: }
{ 38: }
  ( cc: [ '0'..'9','A'..'F','a'..'f' ]; s: 49),
{ 39: }
{ 40: }
  ( cc: [ '0'..'9','A'..'Z','_','a'..'z' ]; s: 40),
{ 41: }
  ( cc: [ 't' ]; s: 50),
{ 42: }
  ( cc: [ 'a' ]; s: 74),
{ 43: }
  ( cc: [ 'r' ]; s: 73),
{ 44: }
  ( cc: [ '0'..'9','A'..'F','H'..'Z','_','a'..'z' ]; s: 40),
  ( cc: [ 'G' ]; s: 51),
{ 45: }
  ( cc: [ '0'..'9','A'..'C','E'..'Z','_','a'..'z' ]; s: 40),
  ( cc: [ 'D' ]; s: 52),
{ 46: }
{ 47: }
{ 48: }
{ 49: }
  ( cc: [ '0'..'9','A'..'F','a'..'f' ]; s: 49),
  ( cc: [ 'L' ]; s: 53),
{ 50: }
  ( cc: [ 'r' ]; s: 54),
{ 51: }
  ( cc: [ '0'..'9','A'..'H','J'..'Z','_','a'..'z' ]; s: 40),
  ( cc: [ 'I' ]; s: 57),
{ 52: }
  ( cc: [ '0'..'9','A'..'Z','_','a'..'z' ]; s: 40),
{ 53: }
{ 54: }
  ( cc: [ 'i' ]; s: 76),
{ 55: }
  ( cc: [ 'F' ]; s: 75),
{ 56: }
  ( cc: [ 'n' ]; s: 58),
{ 57: }
  ( cc: [ '0'..'9','A'..'M','O'..'Z','_','a'..'z' ]; s: 40),
  ( cc: [ 'N' ]; s: 59),
{ 58: }
  ( cc: [ 's' ]; s: 77),
{ 59: }
  ( cc: [ '0'..'9','A'..'Z','_','a'..'z' ]; s: 40),
{ 60: }
  ( cc: [ 'g' ]; s: 90),
{ 61: }
  ( cc: [ 'l' ]; s: 62),
{ 62: }
  ( cc: [ 'e' ]; s: 64),
{ 63: }
  ( cc: [ 'a' ]; s: 72),
{ 64: }
  ( cc: [ 'I' ]; s: 80),
{ 65: }
  ( cc: [ 'f' ]; s: 67),
{ 66: }
  ( cc: [ 'o' ]; s: 82),
{ 67: }
  ( cc: [ 'o' ]; s: 68),
{ 68: }
  ( cc: [ '"' ]; s: 69),
{ 69: }
{ 70: }
{ 71: }
{ 72: }
  ( cc: [ 't' ]; s: 79),
{ 73: }
  ( cc: [ 'a' ]; s: 56),
{ 74: }
  ( cc: [ 'r' ]; s: 55),
{ 75: }
  ( cc: [ 'i' ]; s: 61),
{ 76: }
  ( cc: [ 'n' ]; s: 60),
{ 77: }
  ( cc: [ 'l' ]; s: 63),
{ 78: }
  ( cc: [ '"' ]; s: 70),
{ 79: }
  ( cc: [ 'i' ]; s: 66),
{ 80: }
  ( cc: [ 'n' ]; s: 65),
{ 81: }
  ( cc: [ '"' ]; s: 71),
{ 82: }
  ( cc: [ 'n' ]; s: 78),
{ 83: }
  ( cc: [ 'o' ]; s: 81),
{ 84: }
  ( cc: [ 'f' ]; s: 83),
{ 85: }
  ( cc: [ 'n' ]; s: 84),
{ 86: }
  ( cc: [ 'I' ]; s: 85),
{ 87: }
  ( cc: [ 'e' ]; s: 86),
{ 88: }
  ( cc: [ 'l' ]; s: 87),
{ 89: }
  ( cc: [ 'i' ]; s: 88),
{ 90: }
  ( cc: [ 'F' ]; s: 89)
);

yykl : array [0..yynstates-1] of Integer = (
{ 0: } 1,
{ 1: } 1,
{ 2: } 1,
{ 3: } 1,
{ 4: } 1,
{ 5: } 1,
{ 6: } 1,
{ 7: } 1,
{ 8: } 1,
{ 9: } 1,
{ 10: } 1,
{ 11: } 3,
{ 12: } 5,
{ 13: } 7,
{ 14: } 9,
{ 15: } 11,
{ 16: } 13,
{ 17: } 15,
{ 18: } 17,
{ 19: } 19,
{ 20: } 21,
{ 21: } 22,
{ 22: } 24,
{ 23: } 26,
{ 24: } 27,
{ 25: } 28,
{ 26: } 29,
{ 27: } 30,
{ 28: } 31,
{ 29: } 32,
{ 30: } 34,
{ 31: } 35,
{ 32: } 36,
{ 33: } 37,
{ 34: } 39,
{ 35: } 40,
{ 36: } 41,
{ 37: } 42,
{ 38: } 43,
{ 39: } 43,
{ 40: } 44,
{ 41: } 45,
{ 42: } 45,
{ 43: } 45,
{ 44: } 45,
{ 45: } 46,
{ 46: } 47,
{ 47: } 48,
{ 48: } 49,
{ 49: } 50,
{ 50: } 51,
{ 51: } 51,
{ 52: } 52,
{ 53: } 54,
{ 54: } 55,
{ 55: } 55,
{ 56: } 55,
{ 57: } 55,
{ 58: } 56,
{ 59: } 56,
{ 60: } 58,
{ 61: } 58,
{ 62: } 58,
{ 63: } 58,
{ 64: } 58,
{ 65: } 58,
{ 66: } 58,
{ 67: } 58,
{ 68: } 58,
{ 69: } 58,
{ 70: } 59,
{ 71: } 60,
{ 72: } 61,
{ 73: } 61,
{ 74: } 61,
{ 75: } 61,
{ 76: } 61,
{ 77: } 61,
{ 78: } 61,
{ 79: } 61,
{ 80: } 61,
{ 81: } 61,
{ 82: } 61,
{ 83: } 61,
{ 84: } 61,
{ 85: } 61,
{ 86: } 61,
{ 87: } 61,
{ 88: } 61,
{ 89: } 61,
{ 90: } 61
);

yykh : array [0..yynstates-1] of Integer = (
{ 0: } 0,
{ 1: } 0,
{ 2: } 0,
{ 3: } 0,
{ 4: } 0,
{ 5: } 0,
{ 6: } 0,
{ 7: } 0,
{ 8: } 0,
{ 9: } 0,
{ 10: } 2,
{ 11: } 4,
{ 12: } 6,
{ 13: } 8,
{ 14: } 10,
{ 15: } 12,
{ 16: } 14,
{ 17: } 16,
{ 18: } 18,
{ 19: } 20,
{ 20: } 21,
{ 21: } 23,
{ 22: } 25,
{ 23: } 26,
{ 24: } 27,
{ 25: } 28,
{ 26: } 29,
{ 27: } 30,
{ 28: } 31,
{ 29: } 33,
{ 30: } 34,
{ 31: } 35,
{ 32: } 36,
{ 33: } 38,
{ 34: } 39,
{ 35: } 40,
{ 36: } 41,
{ 37: } 42,
{ 38: } 42,
{ 39: } 43,
{ 40: } 44,
{ 41: } 44,
{ 42: } 44,
{ 43: } 44,
{ 44: } 45,
{ 45: } 46,
{ 46: } 47,
{ 47: } 48,
{ 48: } 49,
{ 49: } 50,
{ 50: } 50,
{ 51: } 51,
{ 52: } 53,
{ 53: } 54,
{ 54: } 54,
{ 55: } 54,
{ 56: } 54,
{ 57: } 55,
{ 58: } 55,
{ 59: } 57,
{ 60: } 57,
{ 61: } 57,
{ 62: } 57,
{ 63: } 57,
{ 64: } 57,
{ 65: } 57,
{ 66: } 57,
{ 67: } 57,
{ 68: } 57,
{ 69: } 58,
{ 70: } 59,
{ 71: } 60,
{ 72: } 60,
{ 73: } 60,
{ 74: } 60,
{ 75: } 60,
{ 76: } 60,
{ 77: } 60,
{ 78: } 60,
{ 79: } 60,
{ 80: } 60,
{ 81: } 60,
{ 82: } 60,
{ 83: } 60,
{ 84: } 60,
{ 85: } 60,
{ 86: } 60,
{ 87: } 60,
{ 88: } 60,
{ 89: } 60,
{ 90: } 60
);

yyml : array [0..yynstates-1] of Integer = (
{ 0: } 1,
{ 1: } 1,
{ 2: } 1,
{ 3: } 1,
{ 4: } 1,
{ 5: } 1,
{ 6: } 1,
{ 7: } 1,
{ 8: } 1,
{ 9: } 1,
{ 10: } 1,
{ 11: } 3,
{ 12: } 5,
{ 13: } 7,
{ 14: } 9,
{ 15: } 11,
{ 16: } 13,
{ 17: } 15,
{ 18: } 17,
{ 19: } 19,
{ 20: } 21,
{ 21: } 22,
{ 22: } 24,
{ 23: } 26,
{ 24: } 27,
{ 25: } 28,
{ 26: } 29,
{ 27: } 30,
{ 28: } 31,
{ 29: } 32,
{ 30: } 34,
{ 31: } 35,
{ 32: } 36,
{ 33: } 37,
{ 34: } 39,
{ 35: } 40,
{ 36: } 41,
{ 37: } 42,
{ 38: } 43,
{ 39: } 43,
{ 40: } 44,
{ 41: } 45,
{ 42: } 45,
{ 43: } 45,
{ 44: } 45,
{ 45: } 46,
{ 46: } 47,
{ 47: } 48,
{ 48: } 49,
{ 49: } 50,
{ 50: } 51,
{ 51: } 51,
{ 52: } 52,
{ 53: } 54,
{ 54: } 55,
{ 55: } 55,
{ 56: } 55,
{ 57: } 55,
{ 58: } 56,
{ 59: } 56,
{ 60: } 58,
{ 61: } 58,
{ 62: } 58,
{ 63: } 58,
{ 64: } 58,
{ 65: } 58,
{ 66: } 58,
{ 67: } 58,
{ 68: } 58,
{ 69: } 58,
{ 70: } 59,
{ 71: } 60,
{ 72: } 61,
{ 73: } 61,
{ 74: } 61,
{ 75: } 61,
{ 76: } 61,
{ 77: } 61,
{ 78: } 61,
{ 79: } 61,
{ 80: } 61,
{ 81: } 61,
{ 82: } 61,
{ 83: } 61,
{ 84: } 61,
{ 85: } 61,
{ 86: } 61,
{ 87: } 61,
{ 88: } 61,
{ 89: } 61,
{ 90: } 61
);

yymh : array [0..yynstates-1] of Integer = (
{ 0: } 0,
{ 1: } 0,
{ 2: } 0,
{ 3: } 0,
{ 4: } 0,
{ 5: } 0,
{ 6: } 0,
{ 7: } 0,
{ 8: } 0,
{ 9: } 0,
{ 10: } 2,
{ 11: } 4,
{ 12: } 6,
{ 13: } 8,
{ 14: } 10,
{ 15: } 12,
{ 16: } 14,
{ 17: } 16,
{ 18: } 18,
{ 19: } 20,
{ 20: } 21,
{ 21: } 23,
{ 22: } 25,
{ 23: } 26,
{ 24: } 27,
{ 25: } 28,
{ 26: } 29,
{ 27: } 30,
{ 28: } 31,
{ 29: } 33,
{ 30: } 34,
{ 31: } 35,
{ 32: } 36,
{ 33: } 38,
{ 34: } 39,
{ 35: } 40,
{ 36: } 41,
{ 37: } 42,
{ 38: } 42,
{ 39: } 43,
{ 40: } 44,
{ 41: } 44,
{ 42: } 44,
{ 43: } 44,
{ 44: } 45,
{ 45: } 46,
{ 46: } 47,
{ 47: } 48,
{ 48: } 49,
{ 49: } 50,
{ 50: } 50,
{ 51: } 51,
{ 52: } 53,
{ 53: } 54,
{ 54: } 54,
{ 55: } 54,
{ 56: } 54,
{ 57: } 55,
{ 58: } 55,
{ 59: } 57,
{ 60: } 57,
{ 61: } 57,
{ 62: } 57,
{ 63: } 57,
{ 64: } 57,
{ 65: } 57,
{ 66: } 57,
{ 67: } 57,
{ 68: } 57,
{ 69: } 58,
{ 70: } 59,
{ 71: } 60,
{ 72: } 60,
{ 73: } 60,
{ 74: } 60,
{ 75: } 60,
{ 76: } 60,
{ 77: } 60,
{ 78: } 60,
{ 79: } 60,
{ 80: } 60,
{ 81: } 60,
{ 82: } 60,
{ 83: } 60,
{ 84: } 60,
{ 85: } 60,
{ 86: } 60,
{ 87: } 60,
{ 88: } 60,
{ 89: } 60,
{ 90: } 60
);

yytl : array [0..yynstates-1] of Integer = (
{ 0: } 1,
{ 1: } 15,
{ 2: } 29,
{ 3: } 31,
{ 4: } 33,
{ 5: } 36,
{ 6: } 39,
{ 7: } 43,
{ 8: } 47,
{ 9: } 51,
{ 10: } 55,
{ 11: } 57,
{ 12: } 59,
{ 13: } 62,
{ 14: } 64,
{ 15: } 67,
{ 16: } 69,
{ 17: } 69,
{ 18: } 71,
{ 19: } 71,
{ 20: } 72,
{ 21: } 72,
{ 22: } 72,
{ 23: } 72,
{ 24: } 72,
{ 25: } 72,
{ 26: } 72,
{ 27: } 72,
{ 28: } 73,
{ 29: } 73,
{ 30: } 74,
{ 31: } 75,
{ 32: } 75,
{ 33: } 75,
{ 34: } 76,
{ 35: } 76,
{ 36: } 76,
{ 37: } 78,
{ 38: } 78,
{ 39: } 79,
{ 40: } 79,
{ 41: } 80,
{ 42: } 81,
{ 43: } 82,
{ 44: } 83,
{ 45: } 85,
{ 46: } 87,
{ 47: } 87,
{ 48: } 87,
{ 49: } 87,
{ 50: } 89,
{ 51: } 90,
{ 52: } 92,
{ 53: } 93,
{ 54: } 93,
{ 55: } 94,
{ 56: } 95,
{ 57: } 96,
{ 58: } 98,
{ 59: } 99,
{ 60: } 100,
{ 61: } 101,
{ 62: } 102,
{ 63: } 103,
{ 64: } 104,
{ 65: } 105,
{ 66: } 106,
{ 67: } 107,
{ 68: } 108,
{ 69: } 109,
{ 70: } 109,
{ 71: } 109,
{ 72: } 109,
{ 73: } 110,
{ 74: } 111,
{ 75: } 112,
{ 76: } 113,
{ 77: } 114,
{ 78: } 115,
{ 79: } 116,
{ 80: } 117,
{ 81: } 118,
{ 82: } 119,
{ 83: } 120,
{ 84: } 121,
{ 85: } 122,
{ 86: } 123,
{ 87: } 124,
{ 88: } 125,
{ 89: } 126,
{ 90: } 127
);

yyth : array [0..yynstates-1] of Integer = (
{ 0: } 14,
{ 1: } 28,
{ 2: } 30,
{ 3: } 32,
{ 4: } 35,
{ 5: } 38,
{ 6: } 42,
{ 7: } 46,
{ 8: } 50,
{ 9: } 54,
{ 10: } 56,
{ 11: } 58,
{ 12: } 61,
{ 13: } 63,
{ 14: } 66,
{ 15: } 68,
{ 16: } 68,
{ 17: } 70,
{ 18: } 70,
{ 19: } 71,
{ 20: } 71,
{ 21: } 71,
{ 22: } 71,
{ 23: } 71,
{ 24: } 71,
{ 25: } 71,
{ 26: } 71,
{ 27: } 72,
{ 28: } 72,
{ 29: } 73,
{ 30: } 74,
{ 31: } 74,
{ 32: } 74,
{ 33: } 75,
{ 34: } 75,
{ 35: } 75,
{ 36: } 77,
{ 37: } 77,
{ 38: } 78,
{ 39: } 78,
{ 40: } 79,
{ 41: } 80,
{ 42: } 81,
{ 43: } 82,
{ 44: } 84,
{ 45: } 86,
{ 46: } 86,
{ 47: } 86,
{ 48: } 86,
{ 49: } 88,
{ 50: } 89,
{ 51: } 91,
{ 52: } 92,
{ 53: } 92,
{ 54: } 93,
{ 55: } 94,
{ 56: } 95,
{ 57: } 97,
{ 58: } 98,
{ 59: } 99,
{ 60: } 100,
{ 61: } 101,
{ 62: } 102,
{ 63: } 103,
{ 64: } 104,
{ 65: } 105,
{ 66: } 106,
{ 67: } 107,
{ 68: } 108,
{ 69: } 108,
{ 70: } 108,
{ 71: } 108,
{ 72: } 109,
{ 73: } 110,
{ 74: } 111,
{ 75: } 112,
{ 76: } 113,
{ 77: } 114,
{ 78: } 115,
{ 79: } 116,
{ 80: } 117,
{ 81: } 118,
{ 82: } 119,
{ 83: } 120,
{ 84: } 121,
{ 85: } 122,
{ 86: } 123,
{ 87: } 124,
{ 88: } 125,
{ 89: } 126,
{ 90: } 127
);


var yyn : Integer;

label start, scan, action;

begin

start:

  (* initialize: *)

  yynew;

scan:

  (* mark positions and matches: *)

  for yyn := yykl[yystate] to     yykh[yystate] do yymark(yyk[yyn]);
  for yyn := yymh[yystate] downto yyml[yystate] do yymatch(yym[yyn]);

  if yytl[yystate]>yyth[yystate] then goto action; (* dead state *)

  (* get next character: *)

  yyscan;

  (* determine action: *)

  yyn := yytl[yystate];
  while (yyn<=yyth[yystate]) and not (yyactchar in yyt[yyn].cc) do inc(yyn);
  if yyn>yyth[yystate] then goto action;
    (* no transition on yyactchar in this state *)

  (* switch to new state: *)

  yystate := yyt[yyn].s;

  goto scan;

action:

  (* execute action: *)

  if yyfind(yyrule) then
    begin
      yyaction(yyrule);
      if yyreject then goto action;
    end
  else if not yydefault and yywrap() then
    begin
      yyclear;
      return(0);
    end;

  if not yydone then goto start;

  yylex := yyretval;

end(*yylex*);



// end.





